$(document).ready(function() {
  var max_fields      = 5;
  var wrapper         = $(".container1");
  var add_button      = $("#add_choice");
  var div             = document.getElementById("container1");

  var x = 2;
  $(add_button).click(function(e){
    e.preventDefault();
    if(x < max_fields){
      x++;
      $(wrapper).append('<div class="form-group row removeable"><div class="col-sm-2"></div><div class="col-sm-6"><input type="text" class="input form-control" required/></div><div class="col-sm-4 row"><button id="delete_choice" type="button" class="btn btn-danger"><i class="fa fa-minus"></i></button></div></div>');
      clrerror();
    }
    else{
      seterror("Sie können maximal 5 Entscheidungsmöglichkeiten erstellen.");
    }
  });

  $(wrapper).on("click","#delete_choice", function(e){
    e.preventDefault();
    $(this).closest('div.removeable').remove();
    x--;
    clrerror();
  })

  $("#submit").click(function(){
    var doc = document.getElementById("voteAdd");
    var choices = [];
    choices.push(doc["choice_1"].value)
    choices.push(doc["choice_2"].value)
    var data = {  title: doc["titel"].value,
                  description: doc["beschreibung"].value,
                  choices: choices
                };
    console.log(data);
    $.ajax({  url: "/",
              type: "POST",
              data: JSON.stringify(data),
              contentType: "application/json",
              dataType: "json",
              statusCode: {
                400: function () {
                  alert("Malformed json. Please report bug");
                }
             },
              success: function (d) {
                if (d == null) {
                  $("#addForm")[0].reset();
                  setmsg("Abstimmung wurde veröffentlicht");
                }
                else{
                    seterror(JSON.stringify(d));
                }
             }
    });
  });
});




ko.bindingHandlers.dateTimePicker = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        //initialize datepicker with some optional options
        var options = allBindingsAccessor().dateTimePickerOptions || {};
        $(element).datetimepicker(options);

        //when a user changes the date, update the view model
        ko.utils.registerEventHandler(element, "dp.change", function (event) {
            var value = valueAccessor();
            if (ko.isObservable(value)) {
                if (event.date != null && !(event.date instanceof Date)) {
                    value(event.date.toDate());
                } else {
                    value(event.date);
                }
            }
        });

        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            var picker = $(element).data("DateTimePicker");
            if (picker) {
                picker.destroy();
            }
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {

        var picker = $(element).data("DateTimePicker");
        //when the view model is updated, update the widget
        if (picker) {
            var koDate = ko.utils.unwrapObservable(valueAccessor());

            //in case return from server datetime i am get in this form for example /Date(93989393)/ then fomat this
            koDate = (typeof (koDate) !== 'object') ? new Date(parseFloat(koDate.replace(/[^0-9]/g, ''))) : koDate;

            picker.date(koDate);
        }
    }
};

$(function () {
  $('#datetimepicker12').datetimepicker({
    inline: true,
    sideBySide: true
  });
});
